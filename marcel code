unit TabbedTemplate;

interface

uses
  System.SysUtils, System.Types, System.UITypes, System.Classes, System.Variants, System.Math,
  FMX.Types, FMX.Graphics, FMX.Controls, FMX.Forms, FMX.Dialogs, FMX.TabControl,
  FMX.StdCtrls, FMX.Gestures, FMX.Edit, FMX.Controls.Presentation, FMX.Consts,
  System.ImageList, FMX.ImgList, FMXTee.Engine, FMXTee.Series, FMXTee.Procs,
  FMXTee.Chart, FMX.Controls3D, FMXTee.Chart3D, FMX.Objects, FMX.Media,
  FMX.ScrollBox, FMX.Memo,  System.IOUtils, System.Messaging, inifiles,
  FMX.MobilePreview,

{$IFDEF ANDROID}
  FMX.Helpers.Android, FMX.media.Android,
  Androidapi.JNI.GraphicsContentViewText,
  Androidapi.JNI.JavaTypes, FMX.Platform.Android, AndroidApi.JniBridge, AndroidApi.Jni.App, AndroidApi.Jni.Media,
  AndroidAPI.jni.OS, Androidapi.Helpers,
{$ENDIF}
  FMX.Layouts, frameUnit;

type
  Tjoint_form = class(TForm)
    HeaderToolBar: TToolBar;
    TabControl1: TTabControl;
    TabItem3: TTabItem;
    TabItem4: TTabItem;
    GestureManager1: TGestureManager;
    ImageList1: TImageList;
    memplay: TMediaPlayer;
    cutpanel: TRectangle;
    cutlabel: TLabel;
    checktimer: TTimer;
    filewritten: TTimer;
    minfreq: TFrame1;
    maxfreq: TFrame1;
    steps_rev: TFrame1;
    mm_rev: TFrame1;
    st_time: TFrame1;
    workpiece_Image: TImageControl;
    TabItem1:TTabItem;
    TabItem2:TTabItem;
    ProgressChart: TChart;
    workpiece: TAreaSeries;
    Panel5: TPanel;
    ProgressBar1: TProgressBar;
    saw_width: TFrame1;
    cut_width: TFrame1;
    Pin_width: TFrame1;
    no_cuts: TFrame1;
    start_x: TFrame1;
    Panel2: TPanel;
    jobquit: TButton;
    startstopbutton: TButton;
    Panel9: TPanel;
    Panel10: TPanel;
    Label12: TLabel;
    Label13: TLabel;
    Version: TLabel;
    ImageControl2: TImageControl;
    Label11: TLabel;
    VertScrollBox1: TVertScrollBox;
    Panel1: TPanel;
    VertScrollBox2: TVertScrollBox;
    GroupBox2: TGroupBox;
    TrackBar1: TTrackBar;
    LogMemo: TMemo;
    distance: TFrame1;
    homebutton: TButton;
    ProgressBar2: TProgressBar;
    Panel3: TPanel;
    VertScrollBox3: TVertScrollBox;
    Panel4: TPanel;
    Saveset: TButton;
    Layout1: TLayout;
    GroupBox1: TGroupBox;
    volumeTrackBar: TTrackBar;
    procedure FormCreate(Sender: TObject);
    procedure FormGesture(Sender: TObject; const EventInfo: TGestureEventInfo;
      var Handled: Boolean);
    procedure startstopbuttonClick(Sender: TObject);
    procedure FormActivate(Sender: TObject);
    procedure FormCloseQuery(Sender: TObject; var CanClose: Boolean);
    procedure jobquitClick(Sender: TObject);
    procedure FormDeactivate(Sender: TObject);
    procedure checktimerTimer(Sender: TObject);
    procedure filewrittenTimer(Sender: TObject);
    procedure TabControl1Change(Sender: TObject);
    procedure TabControl1Resize(Sender: TObject);
    procedure FormResize(Sender: TObject);
    procedure FormKeyDown(Sender: TObject; var Key: Word; var KeyChar: Char;
      Shift: TShiftState);
    procedure startstopbuttonEnter(Sender: TObject);
    procedure startstopbuttonExit(Sender: TObject);
    procedure homebuttonClick(Sender: TObject);
    procedure TrackBar1Tracking(Sender: TObject);
    procedure SavesetClick(Sender: TObject);
    procedure volumeTrackBarChange(Sender: TObject);
  private
      { Private declarations }
    FOrientationChangedId: Integer;
    playfilename : String;
    IniFileName : STRING;
    total_steps,
    sub_total_steps,
    right_action,
    cut_counter,
    fast_counter,
    w_Counter,
    stage_counter: Integer;
    start_positionX,
    fill_cut, width_of_saw,width_of_pin,
    curX : Double; // left side of saw
    filebool : boolean;
    thescale : single;

    procedure ConfiguraRegiaoBR;
    procedure OrientationChangedHandler(const Sender: TObject; const Msg: TMessage);
    procedure resize_all;
    procedure save_settings;
    procedure read_settings(VAR inifile:Tinifile);
  public

    { Public declarations }
    procedure chirp(t0, f0, t1, f1, dt : double; formt: integer; phase: double; VAR timebase:double; amplitude: double; VAR ddt: double; VAR aMS : TMemoryStream; add_to_chart, finish_wave, writeMS : boolean; VAR remnant: double; VAR oldsample :Int16; VAR counted : boolean);
    procedure writestreamtofile(VAR aMS : Tmemorystream;Aprogress:TProgressbar; AButton:TButton);
    procedure right(distance: double;Aprogress:TProgressbar; AButton:TButton);
    procedure log(aMessage:string;    critical : boolean);
    procedure Take_steps(adist:double;Aprogress:TProgressbar; AButton:TButton);
    procedure initlog;
    procedure quitjob;
    procedure FormDestroy(Sender: TObject);
  end;

CONST
     logFilename = 'LOG.log';
     max_log_size = 10; // 10 megabyte

var
  joint_form: Tjoint_form;

implementation

 {$IFDEF ANDROID}
 uses
  vkbdhelper,
  androidapi.IOUtils;
 {$ENDIF}

{$R *.fmx}
{$R *.iPhone4in.fmx IOS}
{$R *.NmXhdpiPh.fmx ANDROID}

procedure Tjoint_form.FormActivate(Sender: TObject);
{$IFDEF ANDROID}
var
  ShortcutIntent: JIntent;
  addIntent: JIntent;
  wIconIdentifier : integer;
  wIconResource : JIntent_ShortcutIconResource;
  shortcut_installed : boolean;
{$ENDIF}
var iniFile : Tinifile;
begin
     //panel2.Height := Height/3;
     workpiece_image.Height := 200;
     progresschart.Height := 200;
     panel2.Height := 150;
     panel3.height := 150;
     jobquit.Visible := false;
     workpiece_Image.Visible := true;
     Progresschart.Visible := false;

     inifile := TiniFile.create(IniFileName);
     try
{$IFDEF ANDROID}
          shortcut_installed := inifile.ReadBOOL('program','shortcut',false);
          if not shortcut_installed then
          begin
              ShortcutIntent := TJIntent.JavaClass.init(SharedActivityContext, SharedActivityContext.getClass);
              ShortcutIntent.setAction(TJIntent.JavaClass.ACTION_MAIN);

              addIntent := TJIntent.Create;
              addIntent.putExtra(TJIntent.JavaClass.EXTRA_SHORTCUT_INTENT, TJParcelable.Wrap((shortcutIntent as ILocalObject).GetObjectID));// here we need to cast the intent as it's not done in delphi by default, not like java
              addIntent.putExtra(TJIntent.JavaClass.EXTRA_SHORTCUT_NAME, StringToJString(Application.Title));
              addIntent.setAction(StringToJString('com.android.launcher.action.INSTALL_SHORTCUT'));
              // get icon resource identifier
              wIconIdentifier := SharedActivity.getResources.getIdentifier(StringToJString('ic_launcher'), StringToJString('drawable'), StringToJString('com.embarcadero.Jointmaster')); // if the app name change, you must change the package name
              wIconResource := TJIntent_ShortcutIconResource.JavaClass.fromContext(SharedActivityContext, wIconIdentifier);
              // set icon for shortcut
              addIntent.putExtra(TJIntent.JavaClass.EXTRA_SHORTCUT_ICON_RESOURCE, TJParcelable.Wrap((wIconResource as ILocalObject).GetObjectID));

              SharedActivityContext.sendBroadcast(addIntent);
              inifile.WriteBool('program','shortcut',true);
          end;
{$ENDIF}
          read_settings(inifile);
     finally
       inifile.Free;
     end;
     //ProgressBar1.visible := false;
end;

procedure Tjoint_form.FormCloseQuery(Sender: TObject; var CanClose: Boolean);
begin
//if (memplay.State = TMediastate.Playing) then
   memplay.stop;//(Handle,Infopanel)
Canclose := true;
end;

procedure Tjoint_form.FormCreate(Sender: TObject);
begin
{$IFDEF ANDROID}
   MainActivity.setVolumeControlStream(TJAudioManager.JavaClass.STREAM_MUSIC);
{$ENDIF}
  { This defines the default active tab at runtime }
   ConfiguraRegiaoBR;
   thescale := 1.0;
   TabControl1.ActiveTab := TabItem1;
   IniFileName := GetHomePath + PathDelim + 'Jointmaster.ini';
   initlog;
   {$IFDEF ANDROID}      // not added standard in fmx.media.android.............
       TMediaCodecManager.RegisterMediaCodecClass('.wav', SVWAVFiles, TMediaType.Audio, TAndroidMediaCodec);
       FOrientationChangedId := TMessageManager.DefaultManager.SubscribeToMessage(TOrientationChangedMessage, OrientationChangedHandler);
   {$ENDIF}
end;

procedure Tjoint_form.FormDeactivate(Sender: TObject);

begin
  save_settings;
end;


procedure Tjoint_form.read_settings (VAR inifile:Tinifile);

begin
          saw_width.ed.text := inifile.ReadString('program','saw_width',saw_width.ed.text);
          distance.ed.text := inifile.ReadString('program','distance',distance.ed.text);
          pin_width.ed.text := inifile.ReadString('program','pin_width',pin_width.ed.text);
          cut_width.ed.text := inifile.ReadString('program','cut_width',cut_width.ed.text);
          no_cuts.ed.text := inifile.ReadString('program','no_cuts',no_cuts.ed.text);
          start_x.ed.text := inifile.ReadString('program','start_x',start_x.ed.text);
          minfreq.ed.text := inifile.ReadString('program','minfreq',minfreq.ed.text);
          maxfreq.ed.Text := inifile.ReadString('program','maxfreq',maxfreq.ed.text);
          steps_rev.ed.Text := inifile.ReadString('program','steps_rev',steps_rev.ed.text);
          mm_rev.ed.Text := inifile.ReadString('program','mm_rev',mm_rev.ed.text);
          st_time.ed.Text := inifile.ReadString('program','st_time',st_time.ed.text);
          try
            trackbar1.Value := inifile.ReadFloat('program','scale',0.0);
          except
            trackbar1.Value := 0.0;
          end;
          try
            volumetrackbar.Value := inifile.ReadFloat('program','volume',volumetrackbar.Value);
          except
            volumetrackbar.Value := 1.0;
          end;
end;


procedure Tjoint_form.save_settings;
VAR  iniFile : Tinifile;

begin
     inifile := TiniFile.create(IniFileName);
     try
        inifile.WriteString('program','saw_width',saw_width.ed.text);
        inifile.WriteString('program','distance',distance.ed.text);
        inifile.WriteString('program','pin_width',pin_width.ed.text);
        inifile.WriteString('program','cut_width',cut_width.ed.text);
        inifile.WriteString('program','no_cuts',no_cuts.ed.text);
        inifile.WriteString('program','start_x',start_x.ed.text);
        inifile.WriteString('program','minfreq',minfreq.ed.text);
        inifile.WriteString('program','maxfreq',maxfreq.Ed.text);
        inifile.WriteString('program','steps_rev',steps_rev.ed.text);
        inifile.WriteString('program','mm_rev',mm_rev.ed.text);
        inifile.WriteString('program','st_time',st_time.ed.text);
        inifile.WriteFloat('program','scale',trackbar1.Value);
        inifile.WriteFloat('program','volume',volumetrackbar.Value);
     finally
       inifile.free;
     end;
end;

procedure Tjoint_form.FormDestroy(Sender: TObject);
begin
{$IFDEF ANDROID}
    TMessageManager.DefaultManager.Unsubscribe(TOrientationChangedMessage, FOrientationChangedId);
{$ENDIF}
end;

procedure TJoint_Form.OrientationChangedHandler(const Sender: TObject; const Msg: TMessage);
begin
  //Log.d('Orientation has changed');
  resize_all;

    {      scaledlayout1.Align := TAlignLayout. else
          scaledlayout2.Align := TAlignLayout.Fit else
          scaledlayout3.Align := TAlignLayout.Fit else
          scaledlayout4.Align := TAlignLayout.Fit;}

end;


procedure Tjoint_form.FormGesture(Sender: TObject;
  const EventInfo: TGestureEventInfo; var Handled: Boolean);
begin
{$IFDEF ANDROID}
  case EventInfo.GestureID of
    sgiLeft:
    begin
      if TabControl1.ActiveTab <> TabControl1.Tabs[TabControl1.TabCount-1] then
        TabControl1.ActiveTab := TabControl1.Tabs[TabControl1.TabIndex+1];
      Handled := True;
    end;

    sgiRight:
    begin
      if TabControl1.ActiveTab <> TabControl1.Tabs[0] then
        TabControl1.ActiveTab := TabControl1.Tabs[TabControl1.TabIndex-1];
      Handled := True;
    end;

   igiZoom:
  begin
{    LObj := Self.ObjectAtPoint(ClientToScreen(EventInfo.Location));
    if LObj is TControl then
    begin
      if (not(TInteractiveGestureFlag.gfBegin in EventInfo.Flags)) and
        (not(TInteractiveGestureFlag.gfEnd in EventInfo.Flags)) then
      begin

        LImage := TControl(LObj.GetObject);
        LImageCenter := LImage.Position.Point + PointF(LImage.Width / 2,
          LImage.Height / 2);
        LImage.Width := LImage.Width + (EventInfo.Distance - FLastDistance);
        LImage.Height := LImage.Height + (EventInfo.Distance - FLastDistance);
        LImage.Position.X := LImageCenter.X - LImage.Width / 2;
        LImage.Position.Y := LImageCenter.Y - LImage.Height / 2;
      end;
      FLastDistance := EventInfo.Distance;
    end;}
  end;


  end;
{$ENDIF}
end;

procedure Tjoint_form.FormKeyDown(Sender: TObject; var Key: Word;
  var KeyChar: Char; Shift: TShiftState);
begin
  if key = 13 then
  begin     // remove focus so that virtual keyboard on android disappears.
    if Tabcontrol1.ActiveTab = tabitem1 then
       startstopbutton.SetFocus
    else if Tabcontrol1.ActiveTab = tabitem3 then
       homebutton.SetFocus
       else if Tabcontrol1.ActiveTab = tabitem2 then
            Trackbar1.SetFocus
  end;
end;


procedure Tjoint_form.FormResize(Sender: TObject);
begin
    resize_all;
end;

procedure Tjoint_form.homebuttonClick(Sender: TObject);
VAR Adistance: double;
begin
   if Homebutton.ImageIndex = 2 then // playing, stop job
   begin
     quitjob;
     log('Movement stopped by user', false);
     cutlabel.Text := 'Movement stopped by user';
     cutpanel.Fill.Color := TAlphaColors.Lightcyan;
     progressbar2.value := 0;
     exit;
   end;
if Homebutton.ImageIndex = 0 then
   begin
     log('Make movement',false);
     startstopbutton.Enabled := false;
     Adistance := Strtofloat(distance.ed.Text);
     right(Adistance,Progressbar2,homebutton);  //this routine takes the step and also sets the imageIndex to 2.
     exit;
   end;
end;

procedure Tjoint_form.jobquitClick(Sender: TObject);
begin
   if (startstopbutton.ImageIndex = 2) then
   begin
     quitjob;
     log('Job quit by user', false);
     cutlabel.Text := 'Job cancelled by user';
     cutpanel.Fill.Color := TAlphaColors.Lightcyan;
     progressbar1.value := 0;
     exit;
   end;

   MessageDlg('This will quit the current job, are you sure ?',TMsgDlgType.mtInformation,[TMsgDlgBtn.mbYes, TMsgDlgBtn.mbNo ], 0,
   procedure(const AResult: System.UITypes.TModalResult)
    begin
      case AResult of
        mrYES: begin
                   quitjob;
                   log('Job quit by user', false);
                   cutlabel.Text := 'Job cancelled by user';
                   cutpanel.Fill.Color := TAlphaColors.Lightcyan;
                   progressbar1.value := 0;
                end;
      end;
    end);
end;


procedure Tjoint_form.resize_all;
VAR awidth : Single;

begin

     awidth := width/ thescale;

     st_time.rescale(aWidth,thescale);
     mm_rev.rescale(aWidth,thescale);
     minfreq.rescale(aWidth,thescale);
     maxfreq.rescale(aWidth,thescale);
     steps_rev.rescale(aWidth,thescale);
     saw_width.rescale(aWidth,thescale);
     cut_width.rescale(aWidth,thescale);
     pin_width.rescale(aWidth,thescale);
     no_cuts.rescale(aWidth,thescale);
     start_x.rescale(aWidth,thescale);
     distance.rescale(aWidth,thescale);

     startstopbutton.Width := 2/3 * awidth;
     homebutton.Width := 2/3 * awidth;
     panel10.Width := awidth - imagecontrol2.Width;
     if (progresschart.Height < 100.1) or (workpiece_image.Height < 100.1) then
     begin   // show scrollbar
         progresschart.Align :=  TalignLayout.Bottom;
         progresschart.Height := Height/3;
         workpiece_image.Align := TalignLayout.Bottom;
         workpiece_image.Height := Height/3;
         panel5.Align := TalignLayout.Top;
         panel1.visible := true;
         headertoolbar.Height :=	48;
         panel2.Height := Height/3;
         panel3.height := Height/3;
         panel5.Height := panel2.Height + workpiece_image.Height + progressbar1.height;
     end;
     if panel1.visible and (panel1.height > 1) then
     begin
          panel5.Align := TalignLayout.Client;
          workpiece_image.Height := 200;
          progresschart.Height := 200;
          panel2.Height := 150;
          panel3.height := 150;
          progresschart.Align :=  TalignLayout.Client;
          workpiece_image.Align :=  TalignLayout.Client;
          panel1.visible := false;
     end;
     if (progresschart.Height > 300.1) or (workpiece_image.Height > 300.1) then
     begin
       if progresschart.Height > 300.1 then
       begin
          headertoolbar.Height := headertoolbar.Height + (progresschart.Height - 300.1)/2;
          panel2.Height := panel2.Height + (progresschart.Height - 300.1)/2;
          panel3.height := panel2.Height;
       end
       else
       if workpiece_image.Height > 300.1 then
       begin
          headertoolbar.Height := headertoolbar.Height + (workpiece_image.Height - 300.1)/2;
          panel2.Height := panel2.Height + (workpiece_image.Height - 300.1)/2;
          panel3.height := panel2.Height;
       end;
     end;

end;



procedure TJoint_form.quitjob;
begin
     startstopbutton.ImageIndex := 0;
     homebutton.ImageIndex := 0;
     startstopbutton.Text := 'Press here to start job';
     Homebutton.Text := 'Press here to move';
     startstopbutton.Hint := 'Press to start movement to Start position';
     Homebutton.Enabled := true;
     Startstopbutton.Enabled := true;
     saw_width.enabled := true;
     cut_width.enabled := true;
     pin_width.enabled := true;
     No_cuts.Enabled := true;
     start_x.enabled := true;
     workpiece_Image.Visible := true;
     progresschart.visible := false;
     jobquit.visible := false;
end;



procedure Tjoint_form.startstopbuttonClick(Sender: TObject);
VAR

    process_counter,
    Number_of_cuts: INTEGER;
    width_counter,
    width_of_cut : Double;
    dummy : String;

BEGIN
   if startstopbutton.ImageIndex = 2 then // playing, stop job
   begin
     quitjob;
     log('Job quit by user', false);
     cutlabel.Text := 'Job cancelled by user';
     cutpanel.Fill.Color := TAlphaColors.Lightcyan;
     progressbar1.value := 0;
     exit;
   end;

   start_positionX := Strtofloat(start_x.ed.Text);
   width_of_cut := Strtofloat(cut_width.ed.Text);
   width_of_pin := Strtofloat(pin_width.ed.Text);
   width_of_saw := Strtofloat(saw_width.ed.Text);

   Number_of_cuts := StrtoInt(No_cuts.ed.text);

   if width_of_saw > width_of_cut + 1.0E-5 then
   begin
       fmtstr(dummy,'Saw width %f is bigger than cut width %f',[width_of_saw,width_of_cut]);
       MessageDlg(dummy,TMsgDlgType.mtInformation,[TMsgDlgBtn.mbOk], 0,
       procedure(const AResult: System.UITypes.TModalResult)
        begin
          case AResult of
            mrOk: begin
                       quitjob;
                       log(dummy, false);
                       cutlabel.Text := dummy;
                       cutpanel.Fill.Color := TAlphaColors.Lightcyan;
                    end;
          end;
        end);
       exit;
   end;

   if (width_of_saw  < 0) or (width_of_cut < 0) or (width_of_pin < 0) or (Number_of_cuts <= 0) then
   begin
       fmtstr(dummy,'Please do not enter numbers less than or equal zero',[]);
       MessageDlg(dummy,TMsgDlgType.mtInformation,[TMsgDlgBtn.mbOk], 0,
       procedure(const AResult: System.UITypes.TModalResult)
        begin
          case AResult of
            mrOk: begin
                       quitjob;
                       log(dummy, false);
                       cutlabel.Text := dummy;
                       cutpanel.Fill.Color := TAlphaColors.Lightcyan;
                    end;
          end;
        end);
      exit;
   end;


   width_counter := (width_of_cut  - width_of_saw) /width_of_saw;
   w_counter := ROUND(width_counter);
   IF w_counter < (width_counter - 0.001) THEN
      INC(w_counter);
   IF w_counter = 0 THEN
      fill_cut := 0
   ELSE fill_cut := (width_of_cut - width_of_saw)/ w_counter;

   cut_counter := 0;
   process_counter := 1;
   fast_counter := -1; {Counts the number of times the saw has been in the cut.}


   if startstopbutton.ImageIndex = 0 then
   begin
     log('New program',false);
     workpiece.clear;
     Homebutton.Enabled := false;
     jobquit.visible := true;
     progresschart.visible := true;
     Progresschart.Title.Caption := 'Moving to Start position';
     workpiece_Image.Visible := false;
     workpiece.AddXY(0,0);
     workpiece.AddXY(0,100);
     stage_counter := 1;           //note, each time the button is pressed, stage_counter is incremented.
     right_action := 1;
     right(start_positionX,progressbar1,startstopbutton);  //this routine takes the step and also sets the imageIndex to 2.
     exit;
   end;

   inc(stage_counter);


   REPEAT
       fast_counter := -1; {Counts the number of times the saw has been in the cut.}
       REPEAT
          INC(fast_counter);
          IF fast_counter < w_counter THEN
          begin
             INC(process_counter);
             if process_counter=stage_counter then  // note that only the stage is done that corresponds to the number of clicks on the start/ stop button.
             begin
                fmtstr(dummy,'Moving %f mm for cutting: %d of %d for cut: %d',[fill_cut, fast_counter+2,w_counter+1,cut_counter+1]);
                Progresschart.Title.Caption := dummy;
                right_action := 2;
                right(fill_cut,progressbar1,startstopbutton);        {The saw is not ready with the cut yet.}
                exit;


//                if (cut_counter + 1 = number_of_cuts) and (fast_counter + 1 = w_counter) then
//                begin
//                   workpiece.AddXY(curX + width_of_saw,100);
//                   workpiece.AddXY(curX + width_of_saw+200,100);
//                end;
             end;
          end;
       UNTIL fast_counter = w_counter;
       INC(cut_counter);
       IF cut_counter < number_of_cuts THEN
           begin
              INC(process_counter);
              if process_counter=stage_counter then // note that only the stage is done that corresponds to the number of clicks on the start/ stop button.
              begin
                 fmtstr(dummy,'Moving %f mm for cutting: %d of %d for cut: %d',[width_of_pin + width_of_saw, 1,w_counter+1,cut_counter+1]);
                 Progresschart.Title.Caption := dummy;
                 workpiece.AddXY(curX+width_of_saw,100);
                 right_action := 3;
                 right(width_of_pin + width_of_saw,progressbar1,startstopbutton);
                 exit;
              end;
           end
       ELSE
           begin
                 INC(process_counter);
                 if process_counter=stage_counter then
                 begin
                    //right(width_of_saw);  {Take care the saw is just after the last cut.}
                    Progresschart.Title.Caption := 'Finished';
                 end;
           end;
   UNTIL cut_counter = number_of_cuts;



//    if cut_counter=number_of_cuts then
   if process_counter=stage_counter then
   begin
     startstopbutton.ImageIndex := 0;
     Homebutton.Enabled := true;
     jobquit.visible := false;
     startstopbutton.Text := 'Press here to start job';
     startstopbutton.Hint := 'Press to start movement to Start position';
     cutpanel.Fill.Color :=  TAlphaColors.Lightcyan;
     cutlabel.Text := 'Jointmaster';
     progresschart.visible := false;
     saw_width.enabled := true;
     cut_width.enabled := true;
     pin_width.enabled := true;
     No_cuts.Enabled := true;
     start_x.enabled := true;
     workpiece_Image.Visible := true;
     progresschart.visible := false;
     progressbar1.value := 0;
   end;
END;


procedure Tjoint_form.startstopbuttonEnter(Sender: TObject);
var
  r: TRectangle;
  begin
  // Find the background TRectangle style element for the button
  r := ((Sender as TButton).FindStyleResource('rectangle3style') as TRectangle);
  if Assigned(r) then
  begin
    r.Fill.Color := TAlphaColors.blue;
  end;
end;

procedure Tjoint_form.startstopbuttonExit(Sender: TObject);
var
  r: TRectangle;
  begin
  // Find the background TRectangle style element for the button
  r := ((Sender as Tbutton).FindStyleResource('rectangle3style') as TRectangle);
  if Assigned(r) then
  begin
    r.Fill.Color := TAlphaColors.White;
  end;
end;

procedure Tjoint_form.right(distance: double; Aprogress:TProgressbar; AButton:TButton);
// returns true if anybody pressed stop while moving.
begin

     Abutton.ImageIndex := 2;
     cutlabel.text := 'Moving do not cut';
     cutlabel.Repaint;
     cutpanel.Fill.Color := TAlphaColors.red;
     cutpanel.Repaint;
     Abutton.Text := 'Stop';
     Abutton.Hint := 'Press to stop and reset the program';

     Take_steps // communicate here bluetooth


end;


procedure Tjoint_form.SavesetClick(Sender: TObject);
begin
  save_settings;
end;

procedure Tjoint_form.TabControl1Change(Sender: TObject);

begin
    resize_all;
     {if tabcontrol1.ActiveTab = tabitem1 then
          scaledlayout1.Align := TAlignLayout.Fit else
     if tabcontrol1.ActiveTab = tabitem2 then
          scaledlayout2.Align := TAlignLayout.Fit else
     if tabcontrol1.ActiveTab = tabitem3 then
          scaledlayout3.Align := TAlignLayout.Fit else
     if tabcontrol1.ActiveTab = tabitem4 then
          scaledlayout4.Align := TAlignLayout.Fit;  }
end;

procedure Tjoint_form.TabControl1Resize(Sender: TObject);
begin
     resize_all;
end;

procedure Tjoint_form.Take_steps(adist:double;Aprogress:TProgressbar; AButton:TButton);
begin

end;


procedure Tjoint_form.TrackBar1Tracking(Sender: TObject);
var ti : single;
begin
ti :=trackbar1.Value;
thescale := 1.0 + ti/10;
vertscrollbox2.Scale.X := thescale;
vertscrollbox1.Scale.X := thescale;
vertscrollbox2.Scale.Y := thescale;
vertscrollbox1.Scale.Y := thescale;
vertscrollbox3.Scale.X := thescale;
vertscrollbox3.Scale.Y := thescale;
vertscrollbox1.Align := Talignlayout.None;
vertscrollbox1.Align := Talignlayout.Client;
vertscrollbox2.Align := Talignlayout.None;
vertscrollbox2.Align := Talignlayout.Client;
vertscrollbox3.Align := Talignlayout.None;
vertscrollbox3.Align := Talignlayout.Client;
application.ProcessMessages;
resize_all;
end;


procedure Tjoint_form.volumeTrackBarChange(Sender: TObject);
begin
  memplay.Volume := volumetrackbar.Value;
end;

procedure Tjoint_form.ConfiguraRegiaoBR;
begin
  FormatSettings.DecimalSeparator    := '.';
  FormatSettings.ThousandSeparator   := ',';
  FormatSettings.CurrencyDecimals    := 2;
  FormatSettings.DateSeparator       := '/';
  FormatSettings.ShortDateFormat     := 'dd/mm/yyyy';
  FormatSettings.LongDateFormat      := 'dd/mm/yyyy';
  FormatSettings.TimeSeparator       := ':';
  FormatSettings.TimeAMString        := 'AM';
  FormatSettings.TimePMString        := 'PM';
  FormatSettings.ShortTimeFormat     := 'hh:nn';
  FormatSettings.LongTimeFormat      := 'hh:nn:ss';
  FormatSettings.CurrencyString      := '€';
end;



procedure Tjoint_form.log(aMessage:string; critical : boolean);
VAR S : String;
begin
   S := FormatDateTime('ddd d mmm" at "hh:mm:ss',now) {+ ' ' + Version.text} + ' : ' +aMessage;
   if logmemo.lines.Count > 1000 then
      logmemo.lines.clear;
   logmemo.lines.add(S);
end;


procedure Tjoint_form.initlog;
begin
 logmemo.lines.clear;
end;




end.m
